#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
  if [[ $TERM == xterm ]]; then
    export TERM='xterm-256color'
  elif [[ $TERM == screen ]]; then
    export TERM=screen-256color
  fi
fi

source $DOTFILES/bash/.colors

# ----------------------------------------------------------------------------------------
# Color setting of the different parts of the prompt based on the available terminal
# capabilities
# ----------------------------------------------------------------------------------------

# Abstraction layer for the colors between 8 bit terminals and tput supported 256 bit

if tput setaf 1 &>/dev/null; then
  # Text color variable.
  # textColor="${lYellow}"
  # textColor="${mustard3}"
  # textColor="${lGrey}"
  # textColor="${rBlack}"
  # textColor="${sBlue}"
  # textColor="${sCyan}"
  # textColor="${green3}"
  # textColor="${rRed}"
  # textColor="${reset}"
  # textColor="${sepia1}"
  # textColor="${sepia2}"
  # textColor="${dYellow}"
  # textColor="${blue1}"
  textColor="${dYellow}"

  # Symbol color variable.
  # symbolColor="${sBlue}"
  symbolColor="${lGrey}"
  errorColor="${rRed}"

  # Branch color variable.
  branchColor="${lOrange}"

  # Repo Status color variable.
  repoStatusColor="${sCyan}"

  # Word like at,in etc. color variable.
  # wordColor="${sWhite}"
  wordColor="${lGrey}"

  # PWD color variable.
  pwdColor="${sBlue}"

  # User color variables
  userRootColor="${lRed}"
  # userNonRootColor="${rGreen}"
  userNonRootColor="${dGreen}"

  # SSH color variables
  hostSSHColor="${dYellow}"
  hostNonSSHColor="${dOrange}"
else
  # There is not much to do here in coloring cases. This is kind of fallback to 8-colors.
  # Orange is always mapped to Yellow as 8-colors donot have orange as such

  # Text color variable.
  textColor="${rYellow}"

  # Symbol color variable.
  symbolColor="${bWhite}"
  errorColor="${bRed}"

  # Branch color variable.
  branchColor="${bYellow}"

  # Repo Status color variable.
  repoStatusColor="${bCyan}"

  # PWD color variable.
  pwdColor="${bBlue}"

  # Word like at,in etc. color variable.
  wordColor="${bWhite}"

  # User color variables
  userRootColor="${bYellow}"
  userNonRootColor="${bGreen}"

  # SSH color variables
  hostSSHColor="${bRed}"
  hostNonSSHColor="${rYellow}"
fi

# ----------------------------------------------------------------------------------------
# Style setting of the different parts of the prompt based on context of terminal
# ----------------------------------------------------------------------------------------

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${bold}${userRootColor}"
else
  userStyle="${bold}${userNonRootColor}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${hostSSHColor}"
else
  hostStyle="${bold}${hostNonSSHColor}"
fi

textStyle="${textColor}"
wordStyle="${wordColor}"
branchStyle="${branchColor}"
repoStatusStyle="${repoStatusColor}"
pwdStyle="${pwdColor}"

# Prompt Symbol Color
defaultSymbolStyle="${bold}${symbolColor}"
errorSymbolStyle="${bold}${errorColor}"

# Prompt Symbol
# ❯, >, , », ⨔, ⌇, 󰘧, λ, λ:, ⁂, ➲, \$
promptSymbol="\>"

# ----------------------------------------------------------------------------------------
# Prompt functions for the handling last command status and git status
# ----------------------------------------------------------------------------------------

# get_status() {
#   local EXIT="$?"
#   if [ $EXIT != 0 ]; then
#     symbolStyle=$errorSymbolStyle
#   else
symbolStyle=$defaultSymbolStyle
#   fi
# }

prompt_git() {
  local s=''
  local branchName=''

  # Check if the current directory is in a Git repository.
  git rev-parse --is-inside-work-tree &>/dev/null || return

  # Check for what branch we’re on.
  # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
  # tracking remote branch or tag. Otherwise, get the
  # short SHA for the latest commit, or give up.
  branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
    git describe --all --exact-match HEAD 2>/dev/null ||
    git rev-parse --short HEAD 2>/dev/null ||
    echo '(unknown)')"

  # Early exit for Chromium & Blink repo, as the dirty check takes too long.
  # Thanks, @paulirish!
  # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
  repoUrl="$(git config --get remote.origin.url)"
  if grep -q 'chromium/src.git' <<<"${repoUrl}"; then
    s+='*'
  else
    # Check for uncommitted changes in the index.
    if ! $(git diff --quiet --ignore-submodules --cached); then
      s+='+'
    fi
    # Check for unstaged changes.
    if ! $(git diff-files --quiet --ignore-submodules --); then
      s+='!'
    fi
    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      s+='?'
    fi
    # Check for stashed files.
    if $(git rev-parse --verify refs/stash &>/dev/null); then
      s+='$'
    fi
  fi

  [ -n "${s}" ] && s=" [${s}]"

  echo -e "${1}${branchName}${2}${s}"
}

# function prompt_update() {
#   get_status # Get the last command status and set the color of the symbol based on it
#   # Set the terminal title and prompt.
PS1="\n"                  # newline
PS1+="\[${userStyle}\]\u" # username
PS1+="\[${wordStyle}\] at "
PS1+="\[${hostStyle}\]\h (\t)" # host
PS1+="\[${wordStyle}\] in "
PS1+="\[${pwdStyle}\]\w"                                                                    # working directory full path
PS1+="\$(prompt_git \"\[${wordStyle}\] on \[${branchStyle}\]\" \"\[${repoStatusStyle}\]\")" # Git repository details
PS1+="\n"                                                                                   # newline after prompt and before symbol
PS1+="\[${symbolStyle}\]${promptSymbol} \[${reset}\]"                                       # `$` (and reset color)
PS1+="\[${textColor}\]"                                                                     # Terminal stdout color
export PS1
# }

# PROMPT_COMMAND=prompt_update # Updates the prompt on each command execution

PS2="\[${rYellow}\]→ \[${reset}\]"
export PS2
