#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
	if [[ $TERM == xterm ]]; then
		export TERM='xterm-256color'
	elif [[ $TERM == screen ]]; then
		export TERM=screen-256color
	fi
fi

prompt_git() {
	local s=''
	local branchName=''

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
		git describe --all --exact-match HEAD 2>/dev/null ||
		git rev-parse --short HEAD 2>/dev/null ||
		echo '(unknown)')"

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)"
	if grep -q 'chromium/src.git' <<<"${repoUrl}"; then
		s+='*'
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+'
		fi
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!'
		fi
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?'
		fi
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$'
		fi
	fi

	[ -n "${s}" ] && s=" [${s}]"

	echo -e "${1}${branchName}${2}${s}"
}

if tput setaf 1 &>/dev/null; then
	tput sgr0 # reset colors
	bold=$(tput bold)
	italic=$(tput sitm)
	reset=$(tput sgr0)
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0)
	# blue=$(tput setaf 33);
	cyan=$(tput setaf 37)
	# green=$(tput setaf 64);
	orange=$(tput setaf 208)
	# orange=$(tput setaf 166);
	purple=$(tput setaf 125)
	red=$(tput setaf 124)
	violet=$(tput setaf 61)
	white=$(tput setaf 15)
	# yellow=$(tput setaf 136);

	# Other Variants, taken from https://unix.stackexchange.com/a/124409

	# black=$(tput setaf 010);
	green=$(tput setaf 10)
	yellow=$(tput setaf 227)
	# blue=$(tput setaf 57);
	# blue=$(tput setaf 63);
	blue=$(tput setaf 69)
	# grey=$(tput setaf 235);
	# grey=$(tput setaf 236);
	# grey=$(tput setaf 237);
	# grey=$(tput setaf 240);
	grey=$(tput setaf 243)
	# grey=$(tput setaf 247);
	# grey=$(tput setaf 248);
	# grey=$(tput setaf 249);
	# grey=$(tput setaf 254);
else
	# bold='';
	bold="\e[1m"
	italic="\e[3m"
	reset="\e[0m"
	black="\e[1;30m"
	blue="\e[1;34m"
	cyan="\e[1;36m"
	green="\e[1;32m"
	orange="\e[1;33m"
	purple="\e[1;35m"
	red="\e[1;31m"
	violet="\e[1;35m"
	white="\e[1;37m"
	#yellow="\e[1;33m";

	# Other Variants, taken from https://unix.stackexchange.com/a/124409

	# black="\e[0;30m";
	# lblue="\e[0;34m";
	# cyan="\e[0;36m";
	# green="\e[0;32m";
	# orange="\e[0;33m";
	# purple="\e[0;35m";
	# red="\e[0;31m";
	# violet="\e[0;35m";
	# white="\e[0;37m";
	yellow="\e[0;33m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${orange}"
else
	userStyle="${green}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${yellow}"
else
	hostStyle="${orange}"
fi

# Prompt Symbol Color
# symbolStyle="${bold}${orange}"
symbolStyle="${bold}${white}"
# symbolStyle="${bold}${cyan}"
# symbolStyle="${bold}${green}"
# symbolStyle="${bold}${violet}"
# symbolStyle="${bold}${yellow}"
# symbolStyle="${bold}${black}"
# symbolStyle="${bold}${blue}"
# symbolStyle="${bold}${grey}"

promptConnectorStyle="${bold}${green}"
# promptConnectorOpen="┌─ "
# promptConnectorClose="└──"
# promptConnectorOpen="┏━━ "
# promptConnectorClose="┗━━━"
# promptConnectorOpen="╭── "
# promptConnectorClose="╰───╌╌"
# promptConnectorOpen="╭─ "
# promptConnectorClose="╰╌╌"
# promptConnectorOpen=""
# promptConnectorClose=""

# Prompt Symbol
# promptSymbol="❯"
# promptSymbol=">"
# promptSymbol=""
# promptSymbol="»"
# promptSymbol="⨔"
# promptSymbol="⌇"
# promptSymbol="󰘧"
# promptSymbol="λ"
promptSymbol="λ:"
# promptSymbol="⁂"
# promptSymbol="➲"
# promptSymbol="\$"

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"
# PS1="\[${italic}\]\n"; # Italic the PS1
# PS1+="\[${bold}\]"; # No newline at the top and after the command text
PS1+="\[${bold}\]\n"                                     # newline
PS1+="\[${promptConnectorStyle}\]${promptConnectorOpen}" # newline
PS1+="\[${bold}\]"                                       # newline
PS1+="\[${userStyle}\]\u"                                # username
PS1+="\[${white}\] at "
PS1+="\[${hostStyle}\]\h (\t)" # host
PS1+="\[${white}\] in "
PS1+="\[${blue}\]\w"                                                    # working directory full path
PS1+="\$(prompt_git \"\[${white}\] on \[${orange}\]\" \"\[${cyan}\]\")" # Git repository details
PS1+="\n"
# PS1+="\[${white}\]${promptSymbol} \[${reset}\]"; # `$` (and reset color)
PS1+="\[${promptConnectorStyle}\]${promptConnectorClose}" # Terminal stdout color
PS1+="\[${symbolStyle}\]${promptSymbol} \[${reset}\]"     # `$` (and reset color)
PS1+="\[${yellow}\]"                                      # Terminal stdout color
# PS1+="\[${green}\]"; # Terminal stdout color
export PS1

PS2="\[${yellow}\]→ \[${reset}\]"
export PS2

# export PS1="\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;33m\](\t)\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\\[\033[36m\]\$(git_branch)\[\033[00m\]\n$ \[\033[36m\]"
# export PS1="\[\e[32m\][\[\e[m\]\[\e[31m\]\u\[\e[m\]\[\e[33m\]@\[\e[m\]\[\e[32m\]\h\[\e[m\]:\[\e[36m\]\w\[\e[m\]\[\e[32m\]]\[\e[m\]\[\e[32;47m\]\\$\[\e[m\] "
# export PS1="\[\e[m\][\[\e[m\]\[\e[35m\]\u\[\e[m\]\[\e[33m\]@\[\e[m\]\[\e[32m\]\h\[\e[m\]:\[\e[36m\]\w\[\e[m\]\[\e[m\]]\[\e[m\]\$"

# Taken form https://github.com/Asheq/dotfiles
# Bash prompt
# ==============================================================================
# Text style ANSI escape codes
__style_reset='\[\e[0m\]'
__style_connector='\[\e[0;36m\]'
__style_primary='\[\e[0;30;46m\]'
__style_secondary='\[\e[0;30;43m\]'
__style_tertiary='\[\e[0;30;47m\]'
__style_error='\[\e[0;31m\]'
__style_success='\[\e[0;32m\]'

# Glyphs
__glyph_host='Hostname'
__glyph_jobs='Jobs'
__glyph_logout='Non-login'
__glyph_success='✔'
__glyph_user='User'

function __prompt_command() {
	local exit_code="$?"
	PS1=""
	PS1+="${__style_connector}┌─"
	PS1+="$(__prompt_section_pwd)"
	PS1+="$(__prompt_section_git)"
	PS1+="$(__prompt_section_other)"
	PS1+="$(__prompt_section_exit_code ${exit_code})"
	PS1+="\n"
	PS1+="${__style_connector}└─$ "
	PS1+="${__style_reset}"
}

function __prompt_section_pwd() {
	echo "${__style_primary} \w "
}

# shellcheck disable=SC2034
GIT_PS1_SHOWDIRTYSTATE=true
# shellcheck disable=SC2034
GIT_PS1_SHOWSTASHSTATE=true
# shellcheck disable=SC2034
GIT_PS1_SHOWUNTRACKEDFILES=true
# shellcheck disable=SC2034
GIT_PS1_SHOWUPSTREAM=true
# shellcheck disable=SC2034
GIT_PS1_STATESEPARATOR=' '
# shellcheck disable=SC2034
GIT_PS1_DESCRIBE_STYLE='branch'
# shellcheck disable=SC2034
GIT_PS1_SHOWCOLORHINTS=true # Only works when using __git_ps1 for PROMPT_COMMAND
# shellcheck disable=SC2034
GIT_PS1_HIDE_IF_PWD_IGNORED=true
function __prompt_section_git() {
	if command -v __git_ps1 &>/dev/null; then
		git_ps1_output="$(__git_ps1)"
	fi

	if [[ "${git_ps1_output}" != "" ]]; then
		output="${git_ps1_output:2:-1}"
		echo "${__style_reset} ${output} "
	fi
}

function __prompt_section_other() {
	flag_array=("$(__prompt_flag_node)" "$(__prompt_flag_npm)" "$(__prompt_flag_user)" "$(__prompt_flag_host)" "$(__prompt_flag_jobs)" "$(__prompt_flag_not_login_shell)")

	flagstring=""
	for flag in "${flag_array[@]}"; do
		if [[ "${flag}" != "" ]]; then
			flagstring+="${flag}  "
		fi
	done

	flagstring="${flagstring/%  /}"

	if [[ "${flagstring}" != "" ]]; then
		echo "${__style_tertiary} ${flagstring} "
	fi
}

function __prompt_flag_node() {
	if command -v node &>/dev/null; then
		echo "node=$(node -v)"
	fi
}

function __prompt_flag_npm() {
	if command -v npm &>/dev/null; then
		echo "npm=$(npm -v)"
	fi
}

function __prompt_flag_python() {
	if command -v python &>/dev/null; then
		echo "python=$(python --version)"
	fi
}

function __prompt_flag_pip() {
	if command -v pip &>/dev/null; then
		echo "pip=$(pip --version)"
	fi
}

function __prompt_flag_user() {
	if [[ "${USER}" != "${LOGNAME}" ]]; then
		echo "${__glyph_user}=${USER}"
	fi
}

function __prompt_flag_host() {
	if [[ -n "${SSH_CONNECTION}" ]]; then
		echo "${__glyph_host}=${HOSTNAME}"
	fi
}

function __prompt_flag_jobs() {
	local count
	count="$(\jobs | wc -l | sed 's/^ *\(\d*\)/\1/')"
	if [[ "${count}" -ne 0 ]]; then
		echo "${__glyph_jobs}=${count}"
	fi
}

function __prompt_flag_not_login_shell() {
	if ! shopt -q login_shell; then
		echo "${__glyph_logout}"
	fi
}

function __prompt_section_exit_code() {
	local exit_code="$1"
	if [[ "${exit_code}" != 0 ]]; then
		echo "${__style_error} ${exit_code} "
	else
		echo "${__style_success} ${__glyph_success} "
	fi
}
